#!/bin/bash
#SBATCH -D /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching/nf-scATAC-mapping/scATACking/nextflow/work/5c/e2b3ab2bf8b143f2237e5d4aa93565
#SBATCH -J nf-figures_making_(ENCSR007QIO)
#SBATCH -o /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching/nf-scATAC-mapping/scATACking/nextflow/work/5c/e2b3ab2bf8b143f2237e5d4aa93565/.command.log
#SBATCH --no-requeue
#SBATCH --signal B:USR2@30
#SBATCH --mem 51200M
#SBATCH -p pool,queue0,encode4,bigmem
# NEXTFLOW TASK: figures_making (ENCSR007QIO)
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x
NXF_ENTRY=${1:-nxf_main}


nxf_sleep() {
  sleep $1 2>/dev/null || sleep 1;
}

nxf_date() {
    local ts=$(date +%s%3N);
    if [[ ${#ts} == 10 ]]; then echo ${ts}000
    elif [[ $ts == *%3N ]]; then echo ${ts/\%3N/000}
    elif [[ $ts == *3N ]]; then echo ${ts/3N/000}
    elif [[ ${#ts} == 13 ]]; then echo $ts
    else echo "Unexpected timestamp value: $ts"; exit 1
    fi
}

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a children
    while read P PP;do
        children[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    kill_all() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${children[$1]:=}; do kill_all $i; done
    }

    kill_all $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

nxf_fs_copy() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  cp -fRL $source $target/$basedir
}

nxf_fs_move() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  mv -f $source $target/$basedir
}

nxf_fs_rsync() {
  rsync -rRl $1 $2
}

on_exit() {
    exit_status=${nxf_main_ret:=$?}
    printf $exit_status > /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching/nf-scATAC-mapping/scATACking/nextflow/work/5c/e2b3ab2bf8b143f2237e5d4aa93565/.exitcode
    set +u
    [[ "$tee1" ]] && kill $tee1 2>/dev/null
    [[ "$tee2" ]] && kill $tee2 2>/dev/null
    [[ "$ctmp" ]] && rm -rf $ctmp || true
    exit $exit_status
}

on_term() {
    set +e
    [[ "$pid" ]] && nxf_kill $pid
}

nxf_launch() {
    /bin/bash -ueo pipefail /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching/nf-scATAC-mapping/scATACking/nextflow/work/5c/e2b3ab2bf8b143f2237e5d4aa93565/.command.sh
}

nxf_stage() {
    true
    # stage input files
    rm -f ENCSR007QIO_barcodes_peaks_counted
    rm -f ENCSR007QIO.barcodes.npz
    rm -f ENCSR007QIO.unique_barcodes.map
    rm -f index_mapping.txt
    ln -s /net/seq/data2/projects/apetukhova/ENCODE4/scATAC/encode_data/results/counted/ENCSR007QIO_barcodes_peaks_counted ENCSR007QIO_barcodes_peaks_counted
    ln -s /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching_adaptation/work/70/b750f6f7718e343985ba0699d88970/ENCSR007QIO.barcodes.npz ENCSR007QIO.barcodes.npz
    ln -s /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching_adaptation/work/26/4659fb770831d586001f0fe855974f/ENCSR007QIO.unique_barcodes.map ENCSR007QIO.unique_barcodes.map
    ln -s /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching_adaptation/work/a8/67516676c997adc2ce6f531f2ad904/index_mapping.txt index_mapping.txt
}

nxf_unstage() {
    true
    [[ ${nxf_main_ret:=0} != 0 ]] && return
}

nxf_main() {
    trap on_exit EXIT
    trap on_term TERM INT USR2
    trap '' USR1

    [[ "${NXF_CHDIR:-}" ]] && cd "$NXF_CHDIR"
    NXF_SCRATCH=''
    [[ $NXF_DEBUG > 0 ]] && nxf_env
    touch /net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching/nf-scATAC-mapping/scATACking/nextflow/work/5c/e2b3ab2bf8b143f2237e5d4aa93565/.command.begin
    set +u
    # conda environment
    source $(conda info --json | awk '/conda_prefix/ { gsub(/"|,/, "", $2); print $2 }')/bin/activate /home/apetukhova/anaconda3/envs/snapatac
    set -u
    export PATH="/net/seq/data2/projects/apetukhova/ENCODE4/scripts/barcodes_matching/nf-scATAC-mapping/scATACking/nextflow/bin:$PATH"
    [[ $NXF_SCRATCH ]] && echo "nxf-scratch-dir $HOSTNAME:$NXF_SCRATCH" && cd $NXF_SCRATCH
    nxf_stage

    set +e
    ctmp=$(set +u; nxf_mktemp /dev/shm 2>/dev/null || nxf_mktemp $TMPDIR)
    local cout=$ctmp/.command.out; mkfifo $cout
    local cerr=$ctmp/.command.err; mkfifo $cerr
    tee .command.out < $cout &
    tee1=$!
    tee .command.err < $cerr >&2 &
    tee2=$!
    ( nxf_launch ) >$cout 2>$cerr &
    pid=$!
    wait $pid || nxf_main_ret=$?
    wait $tee1 $tee2
    nxf_unstage
}

$NXF_ENTRY
